// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  firstname         String
  lastname          String
  displayName       String?
  profileImageSrc   String?
  coverImageSrc     String?
  website           String?
  email             String             @unique
  password          String
  isEmailVerified   Boolean            @default(false)
  confirmationToken String?            @default("")
  phone             String?
  gender            String
  bio               String?
  region            String?
  birthday          String?
  userSettings      UserSettings?      @relation(fields: [userSettingsId], references: [id])
  userSettingsId    String?            @unique
  posts             Post[]
  comments          Comment[]
  followedBy        Follows[]          @relation("following")
  following         Follows[]          @relation("follower")
  likes             Like[]
  likeComment       LikeComment[]
  broadcasts        BroadcastPost[]
  // broadcastComment BroadcastComment[]
  BroadcastComment  BroadcastComment[]

  // @@unique([email])
}

model Post {
  id          String          @id @default(uuid())
  title       String
  body        String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  displayName String?
  comments    Comment[]
  likes       Like[]
  broadcasts  BroadcastPost[]
  ogPostId    String?
}

model Comment {
  id          String             @id @default(uuid())
  title       String             @default("COMMENT")
  body        String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  User        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  displayName String?
  post        Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  parent      Comment?           @relation("parentChild", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
  children    Comment[]          @relation("parentChild")
  likes       LikeComment[]
  broadcasts  BroadcastComment[]
}

model Follows {
  id          String @id
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  // @@id([followerId, followingId]) 
}

model Like {
  id     String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  // @@id([userId, postId])
}

model LikeComment {
  id        String  @id
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String
  commentId String
}

model BroadcastPost {
  id     String @id
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String
  postId String
}

model BroadcastComment {
  id        String  @id
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
}

model UserSettings {
  id   String @id @default(uuid())
  user User?
}

enum Role {
  BASIC
  ADMIN
  // SUPER_ADMIN
}
